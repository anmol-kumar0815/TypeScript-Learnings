A generic class has a generic type parameter list in angle brackets `<>` that follows the name of the class:

```
class className<T>{

}
```

(i) TypeScript allows you to have multiple generic types in the type parameter list. For example:

```
class className<T, U>{

}
```

(ii) The generic constraints are also applied to the generic types in the class:

```
class className<T extends typeA>{

}
```

Placing the type parameter on the class allows you to develop methods and properties that work with the same type.

For example lets create a stack class;
```
class Stack<T> {
  private elements: T[] = [];

  constructor(private size: number) {
  }
  isEmpty(): boolean {
      return this.elements.length === 0;
  }
  isFull(): boolean {
      return this.elements.length === this.size;
  }
  push(element: T): void {
      if (this.elements.length === this.size) {
          throw new Error('The stack is overflow!');
      }
      this.elements.push(element);

  }
  pop(): T {
      if (this.elements.length == 0) {
          throw new Error('The stack is empty!');
      }
      return this.elements.pop();
  }
}
```

Now we can use the same class to create a stack of numbers, strings or objects.

For example:
```
let numbers = new Stack<number>(5);
let numbers = new Stack<string>(5);
let numbers = new Stack<object>(5);
```

===============================================================================================================
TypeScript Generic Interfaces

A generic interface has a generic type parameter list in angle brackets <> following the name of the interface:

```
interface interfaceName<T> {

}
```

or

```
interface interfaceName<T, U> {

}
```

For example:
interface Pair<T, U>{
  key: T,
  value: U
}

const month: Pair<string, number> = {
  key: "Jan",
  value: 1
}
